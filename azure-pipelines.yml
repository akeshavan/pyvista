variables:
  ALLOW_PLOTTING: true
  SHELLOPTS: 'errexit:pipefail'

trigger:
  branches:
    include:
    - '*'
    exclude:
    - '*no-ci*'
  tags:
    include:
    - '*'

pr:
  branches:
    include:
    - '*'
    exclude:
    - '*no-ci*'

jobs:

# Builds the documentation
- job: BuildDocumentation
  pool:
    vmImage: 'ubuntu-20.04'

  variables:
    DISPLAY: ':99.0'
    PYVISTA_OFF_SCREEN: 'True'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: 3.7
    displayName: 'Use Python 3.7'

  - script: |
      git config --global user.name ${GH_NAME}
      git config --global user.email ${GH_EMAIL}
      git config --list | grep user.
    displayName: 'Configure git'
    env:
      GH_NAME: $(gh.name)
      GH_EMAIL: $(gh.email)

  - script: |
      pip install -e .
    displayName: Install pyvista

  # - script: |      
  #     # .ci/setup_headless_display.sh
  #     # python .ci/pyvista_test.py  # for debug
  #   displayName: Install headless display

  - script: |
      sudo apt-get install python3-tk pandoc libgl1-mesa-glx xvfb
      pip install -r requirements_docs.txt
    displayName: 'Install dependencies'

  - script: |
      EXAMPLES_PATH=$(python -c "import pyvista; print(pyvista.EXAMPLES_PATH)")
      mkdir -p EXAMPLES_PATH
      echo "##vso[task.setvariable variable=EXAMPLES_PATH]$EXAMPLES_PATH"
      PYVISTA_VERSION=$(python -c "import io; exec(io.open('pyvista/_version.py').read()); print(__version__)")
      echo "##vso[task.setvariable variable=PYVISTA_VERSION]$PYVISTA_VERSION"
      echo $EXAMPLES_PATH
    displayName: 'Store location of pyvista downloads cache and version'

  - task: Cache@2
    inputs:
      key: 'PYVISTA_EXAMPLES_CACHE | "$(PYVISTA_VERSION)"'
      path: $(EXAMPLES_PATH)
    displayName: Build pyvista examples directory cache

  - task: Cache@2
    inputs:
      key: 'PYVISTA_DOC_EXAMPLES_CACHE | "$(PYVISTA_VERSION)"'
      path: '$(Build.SourcesDirectory)/docs/examples'
    displayName: Build pyvista doc examples cache

  - script: |
      xvfb-run make -C docs html -b coverage
      cat docs/_build/coverage/python.txt
    displayName: 'Build documentation'

  - script: |
      make -C docs doctest
    displayName: 'Test documentation code snippets'

  - script: |
      make -C docs html
    displayName: 'Update figures from doctest'

  # Push example notebooks to pyvista-examples
  - script: |
      pip install cookiecutter
      cookiecutter -f --no-input --config-file ./docs/pyvista-binder-config.yml -o .. https://github.com/pyvista/cookiecutter-pyvista-binder.git;
      rm -rf ../pyvista-examples/notebooks/
      cd docs
      find examples -type f -name '*.ipynb' | cpio -p -d -v ../../pyvista-examples/
      cd ../../pyvista-examples/
      git init
      git add .
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      REMOTE="https://${GH_TOKEN}@github.com/pyvista/pyvista-examples"
      git remote add origin ${REMOTE}
      git push -uf origin master
      cd $BUILD_SOURCESDIRECTORY
    displayName: 'Upload binder examples'
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))
    env:
      GH_TOKEN: $(gh.token)

  # Push example notebooks to pyvista-examples develop branch
  - script: |
      pip install cookiecutter
      cookiecutter -f --no-input --config-file ./docs/pyvista-binder-config.yml -o .. https://github.com/pyvista/cookiecutter-pyvista-binder.git;
      rm -rf ../pyvista-examples/notebooks/
      cd docs
      find examples -type f -name '*.ipynb' | cpio -p -d -v ../../pyvista-examples/
      cd ../../pyvista-examples/
      git init
      git checkout -b develop
      git add .
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      REMOTE="https://${GH_TOKEN}@github.com/pyvista/pyvista-examples"
      git remote add origin ${REMOTE}
      git push -uf origin develop
      cd $BUILD_SOURCESDIRECTORY
    displayName: 'Upload binder examples to develop'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    env:
      GH_TOKEN: $(gh.token)

  # upload documentation to pyvista-docs gh-pages on tags
  - script: |
      git clone --depth 1 https://${GH_TOKEN}@github.com/pyvista/pyvista-docs.git
      cd pyvista-docs
      git gc --prune=now
      git remote prune origin
      rm -rf *
      cp -r $BUILD_SOURCESDIRECTORY/docs/_build/html/* .
      cp $BUILD_SOURCESDIRECTORY/docs/README.md .
      cp $BUILD_SOURCESDIRECTORY/docs/ads.txt .
      touch .nojekyll
      echo "docs.pyvista.org" >> CNAME
      git add .
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      git push
    displayName: Upload Documentation to pyvista-docs
    env:
      GH_TOKEN: $(gh.token)
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/'))

  # upload documentation to pyvista-docs develop when merging with master
  - script: |
      mkdir pyvista-docs-dev
      cd pyvista-docs-dev
      git init
      git checkout -b gh-pages
      cp -r $BUILD_SOURCESDIRECTORY/docs/_build/html/* .
      cp $BUILD_SOURCESDIRECTORY/docs/README.md .
      cp $BUILD_SOURCESDIRECTORY/docs/ads.txt .
      touch .nojekyll
      echo "dev.pyvista.org" >> CNAME
      git add .
      REMOTE="https://${GH_TOKEN}@github.com/pyvista/pyvista-docs-dev"
      git remote add origin ${REMOTE}
      git commit -am "Azure CI commit ref $(Build.SourceVersion)"
      git push -uf origin gh-pages
    displayName: Upload Documentation to pyvista-docs-dev
    env:
      GH_TOKEN: $(gh.token)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  # don't run job on no-ci builds
  condition: not(contains(variables['System.PullRequest.SourceBranch'], 'no-ci'))
